Attack_name: Parent PID Spoofing
Attack_description: |-
  Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)

  Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)

  Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)
guid: 2988133e-561c-4e42-a15f-6281e6a9b2db
name: Parent PID Spoofing - Spawn from New Process
tactic:
  - privilege-escalation
  - defense-evasion
technique:
  - T1134.004
os:
  - windows
description: Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.
executor: powershell
sigma: true
sigma_rule:
  - id: 03d83090-8cba-44a0-b02f-0b756a050306
    name: posh_ps_accessing_win_api.yml
  - id: f62176f3-8128-4faa-bf6c-83261322e5eb
    name: posh_ps_malicious_keywords.yml
  - id: e4a74e34-ecde-4aab-b2fb-9112dd01aed0
    name: file_event_win_csharp_compile_artefact.yml
  - id: dcaa3f04-70c3-427a-80b4-b870d73c94c4
    name: proc_creation_win_susp_csc_folder.yml
  - id: 313fbb0a-a341-4682-848d-6d6f8c4fab7c
    name: posh_ps_susp_windowstyle.yml
  - id: 1883444f-084b-419b-ac62-e0d0c5b3693f
    name: posh_ps_susp_networkcredential.yml
  - id: 0332a266-b584-47b4-933d-a00b103e1b37
    name: posh_ps_susp_gwmi.yml
  - id: 63bf8794-9917-45bc-88dd-e1b5abc0ecfd
    name: posh_ps_copy_item_system32.yml
  - id: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf
    name: posh_ps_susp_keywords.yml
  - id: d23f2ba5-9da0-4463-8908-8ee47f614bb9
    name: posh_ps_file_and_directory_discovery.yml
