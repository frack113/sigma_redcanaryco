Attack_name: DLL Search Order Hijacking
Attack_description: |-
  Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.

  There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)

  Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)

  If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.
guid: 8549ad4b-b5df-4a2d-a3d7-2aee9e7052a3
name: DLL Search Order Hijacking - amsi.dll
tactic:
  - privilege-escalation
  - defense-evasion
  - persistence
technique:
  - T1574.001
os:
  - windows
description: |
  Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)
  https://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/

  Upon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.
sigma: true
sigma_rule:
  - id: fff9d2b7-e11c-4a69-93d3-40ef66189767
    name: win_susp_copy_system32.yml
  - id: 092bc4b9-3d1d-43b4-a6b4-8c8acd83522f
    name: sysmon_in_memory_powershell.yml
  - id: fe6e002f-f244-4278-9263-20e4b593827f
    name: sysmon_alternate_powershell_hosts_moduleload.yml
