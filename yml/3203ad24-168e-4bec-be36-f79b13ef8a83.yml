Attack_name: Process Injection
Attack_description: "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code\
  \ in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges.\
  \ Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process,\
  \ many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections\
  \ to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
guid: 3203ad24-168e-4bec-be36-f79b13ef8a83
name: Remote Process Injection in LSASS via mimikatz
tactic:
  - privilege-escalation
  - defense-evasion
technique:
  - T1055
os:
  - windows
description: |
  Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).
  Especially useful against domain controllers in Active Directory environments.
  It must be executed in the context of a user who is privileged on remote `machine`.

  The effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>
executor: command_prompt
sigma: true
sigma_rule:
  - id: 730fc21b-eaff-474b-ad23-90fd265d4988
    name: proc_creation_win_susp_psexec_eula.yml
  - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133
    name: registry_add_pua_sysinternals_execution_via_eula.yml

