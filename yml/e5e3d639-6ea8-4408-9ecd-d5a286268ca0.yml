Attack_name: Credentials from Web Browsers
Attack_description: "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials\
  \ such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store;\
  \ however, methods exist to extract plaintext credentials from web browsers.\n\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <code>AppData\\\
  Local\\Google\\Chrome\\User Data\\Default\\Login Data</code> and executing a SQL query: <code>SELECT action_url, username_value, password_value FROM logins;</code>. The plaintext password can then be\
  \ obtained by passing the encrypted credentials to the Windows API function <code>CryptUnprotectData</code>, which uses the victimâ€™s cached logon credentials as the decryption key. (Citation: Microsoft\
  \ CryptUnprotectData April 2018)\n \nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation:\
  \ FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the [Windows Credential Manager](https://attack.mitre.org/techniques/T1555/004).\n\
  \nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\n\nAfter acquiring credentials\
  \ from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective\
  \ in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator)."
guid: e5e3d639-6ea8-4408-9ecd-d5a286268ca0
name: WinPwn - PowerSharpPack - Sharpweb for Browser Credentials
tactic:
  - credential-access
technique:
  - T1555.003
os:
  - windows
description: PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn
executor: powershell
sigma: true
sigma_rule:
  - id: 6e897651-f157-4d8f-aaeb-df8151488385
    name: proc_creation_win_susp_powershell_download_cradles.yml
  - id: 85b0b087-eddf-4a2b-b033-d771fa2b9775
    name: proc_creation_win_susp_powershell_download_iex.yml
  - id: e6c54d94-498c-4562-a37c-b469d8e9a275
    name: proc_creation_win_powershell_download_patterns.yml
  - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7
    name: proc_creation_win_powershell_download.yml
  - id: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d
    name: proc_creation_win_susp_web_request_cmd.yml
  - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71
    name: posh_ps_susp_invocation_specific.yml
  - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    name: posh_ps_malicious_commandlets.yml
  - id: 1139d2e2-84b1-4226-b445-354492eba8ba
    name: posh_ps_web_request.yml
  - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090
    name: posh_pm_susp_invocation_specific.yml
  - id: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf
    name: posh_ps_susp_keywords.yml
  - id: 91cb43db-302a-47e3-b3c8-7ede481e27bf
    name: file_access_win_browser_credential_stealing.yml
  - id: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86
    name: posh_pm_bad_opsec_artifacts.yml
