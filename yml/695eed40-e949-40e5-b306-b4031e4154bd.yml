Attack_name: 'Impair Defenses: Disable or Modify Tools'
Attack_description: "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes\
  \ or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries\
  \ may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized\
  \ by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or\
  \ modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features\
  \ added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\n\
  Adversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code>\
  \ may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents\
  \ that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate\
  \ rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example,\
  \ adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate\
  \ drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering\
  \ features.(Citation: avoslocker_ransomware)"
guid: 695eed40-e949-40e5-b306-b4031e4154bd
name: AMSI Bypass - AMSI InitFailed
tactic:
  - defense-evasion
technique:
  - T1562.001
os:
  - windows
description: |
  Any easy way to bypass AMSI inspection is it patch the dll in memory setting the "amsiInitFailed" function to true.
  Upon execution, no output is displayed.

  https://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/
executor: powershell
sigma: true
sigma_rule:
  - id: 30edb182-aa75-42c0-b0a9-e998bb29067c
    name: proc_creation_win_powershell_amsi_init_failed_bypass.yml
