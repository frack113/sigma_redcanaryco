Attack_name: Parent PID Spoofing
Attack_description: |-
  Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <code>CreateProcess</code> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <code>svchost.exe</code> or <code>consent.exe</code>) rather than the current user context.(Citation: Microsoft UAC Nov 2018)

  Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of [PowerShell](https://attack.mitre.org/techniques/T1059/001)/[Rundll32](https://attack.mitre.org/techniques/T1218/011) to be <code>explorer.exe</code> rather than an Office document delivered as part of [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001).(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via [Visual Basic](https://attack.mitre.org/techniques/T1059/005) within a malicious Office document or any code that can perform [Native API](https://attack.mitre.org/techniques/T1106).(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)

  Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <code>lsass.exe</code>), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)
guid: '069258f4-2162-46e9-9a25-c9c6c56150d2'
name: Parent PID Spoofing using PowerShell
tactic:
  - privilege-escalation
  - defense-evasion
technique:
  - T1134.004
os:
  - windows
description: |
  This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.
  Upon execution, "Process C:\Program Files\Internet Explorer\iexplore.exe is spawned with pid ####" will be displayed and
  calc.exe will be launched.

  Credit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)
sigma: true
sigma_rule:
  - id: 03d83090-8cba-44a0-b02f-0b756a050306
    name: posh_ps_accessing_win_api.yml
  - id: e4a74e34-ecde-4aab-b2fb-9112dd01aed0
    name: win_fe_csharp_compile_artefact.yml
  - id: dcaa3f04-70c3-427a-80b4-b870d73c94c4
    name: win_susp_csc_folder.yml
  - id: 66d31e5f-52d6-40a4-9615-002d3789a119
    name: sysmon_suspicious_remote_thread.yml
  - id: eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50
    name: sysmon_powershell_code_injection.yml
