Attack_name: 'Process Injection: Dynamic-link Library Injection'
Attack_description: "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing\
  \ arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading\
  \ the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code>\
  \ (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing\
  \ a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods\
  \ load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\n\
  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection\
  \ from security products since the execution is masked under a legitimate process. "
guid: 8b56f787-73d9-4f1d-87e8-d07e89cbc7f5
name: WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique
tactic:
  - defense-evasion
  - privilege-escalation
technique:
  - T1055.001
os:
  - windows
description: Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn
executor: powershell
sigma: true
sigma_rule:
  - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7
    name: proc_creation_win_powershell_download_patterns.yml
  - id: 85b0b087-eddf-4a2b-b033-d771fa2b9775
    name: proc_creation_win_powershell_download_iex.yml
  - id: e6c54d94-498c-4562-a37c-b469d8e9a275
    name: proc_creation_win_powershell_susp_download_patterns.yml
  - id: 6e897651-f157-4d8f-aaeb-df8151488385
    name: proc_creation_win_powershell_download_cradles.yml
  - id: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d
    name: proc_creation_win_web_request_cmd_and_cmdlets.yml
  - id: 1139d2e2-84b1-4226-b445-354492eba8ba
    name: posh_ps_web_request_cmd_and_cmdlets.yml
  - id: 03d83090-8cba-44a0-b02f-0b756a050306
    name: posh_ps_accessing_win_api.yml
  - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6
    name: posh_ps_malicious_commandlets.yml
  - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71
    name: posh_ps_susp_invocation_specific.yml
  - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090
    name: posh_pm_susp_invocation_specific.yml
  - id: 635dbb88-67b3-4b41-9ea5-a3af2dd88153
    name: net_connection_win_binary_github_com.yml
  - id: 1f21ec3f-810d-4b0e-8045-322202e22b4b
    name: net_connection_win_powershell_network_connection.yml
  - id: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86
    name: posh_pm_bad_opsec_artifacts.yml
