Attack_name: 'Command and Scripting Interpreter: Visual Basic'
Attack_description: |-
  Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)

  Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)

  Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )
guid: 8faff437-a114-4547-9a60-749652a03df6
name: Extract Memory via VBA
tactic:
  - execution
technique:
  - T1059.005
os:
  - windows
description: |
  This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this
  we first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that
  memory location to a file stored in the $env:TEMP\atomic_t1059_005_test_output.bin.
executor: powershell
sigma: true
sigma_rule:
  - id: e6ce8457-68b1-485b-9bdd-3c2b5d679aa9
    name: image_load_susp_winword_vbadll_load.yml

